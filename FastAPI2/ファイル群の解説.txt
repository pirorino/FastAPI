■FastAPI2\db.py
PostgreSQL接続定義。
databasesは使っているが、sqlalchemyはほとんど使っていないので、消してもいいかも知れない（試してみないとわからない）

■FastAPI2\main.py
pythonのメインだが、おまじない系のみ。主処理は　の方に記載

app = FastAPI()があるファイル。
CORS、DB接続処理当を実施

■FastAPI2\URL.txt
PostgreSQLの起動方法等のメモ書き。curlは、当初画面なしで動かしていた時代の実行コマンド。OKと記載のあるものは、コマンドを投げれば動くはず。


■FastAPI2\templates\*
Jinja2で呼び出すHTMLテンプレート。実質UI。
{% extends "layout.html" %}
{% block content %}
    {% set min = namespace(cnt=0) %}
など、{%　で囲まれた変な変数記載のある個所はJinja2による拡張で、Python側から渡されて、HTMLが生成され、ブラウザに返される。

■FastAPI2\users\models.py
テーブル定義

■FastAPI2\users\router.py
実質の主処理で、アクセス先URL＋HTTPメソッドにより、記載の処理が実行される。
javascriptのlibraryロードも同様のURLアクセスがあるので、ここで処理している。

認証・トークン関係
ログイン画面
ファイルupload画面（開発中）
汎用画面
javascriptのlibrary処理
などなどの処理を記載。

return templates.TemplateResponse('login.html',{'request': request})
の様な記載することで、Pythonによる各種処理後、jinja2 htmlテンプレートに引数を渡してブラウザに生成HTMLを返す。

■FastAPI2\users\schemes.py
ORマップ用のクラス。Pythonで関数呼び出しする際、insertやupdateに必要な一連のデータセットがクラスになってないと引数渡しが面倒。
ただ、関数呼び出し（引数渡し）をしないなら別にクラスなくてもいい気もする。
responseで戻す必要があるならいるかも

■FastAPI2\utils\dbutils.py
get_connectionだけが存在。DB接続を返す共通関数

■FastAPI2\static
FastAPIの管理する静的ファイルだが、今んとこ空。
jinja2のtemplateの所に置いてしまった為。

■実行方法
postgreSQL起動
pg_ctl start -D "C:\Program Files\PostgreSQL\13\data"

FastAPI起動
uvicorn main:app --reload

方法
http://localhost:8000/login
ユーザ・パスはDBに登録されていないとだめ

■FastAPI2\postgreSQL_install_info.txt
postgreSQLをローカルにインストールした時の記録


★user/passとOAuth2のトークン処理
https://fabeee.co.jp/blog/mattsun01/
今回実装はpostgreSQL/databasesにしているので注意

ログインからの流れの説明

/login　へアクセスすると、router記載の通り /login.htmlが返される。
login.htmlのフォームでsubmitを押すと、js_auth.jsのfunction LoginClickが呼ばれる

LoginClickすると、
1.fetch  /tokenに対してユーザ・パスワードのpostを実行
2.post   /pages/toppageに対してアクセストークンのpostを実行
と順番に動作する。

1.はコールされたサーバ側でユーザ・パスワードを検証し、一致すればアクセストークン(TOKEN)と
リフレッシュトーク(REFRESH_TOKEN)を返す
クライアントはそれを受け取り、sessionstorageに保管する。
それ以降、同一セッションであれば画面遷移が行われても、APIコール時にアクセストークンを一緒に送信することで
API呼び出し都度簡易的なチェックがされることになる。

トークンは有効期限があり、routerのcreate_tokensに記載がある
現在はアクセストークン60min、リフレッシュトークン30days.である。




★jinja2
公式
https://jinja.palletsprojects.com/en/3.0.x/
わかりやすい
https://www.python.ambitious-engineer.com/archives/760


★FastAPI
公式
https://fastapi.tiangolo.com/

★databases
公式
https://www.encode.io/databases/


■ユーザ登録
Databaseとusersテーブルができたら以下によりユーザ登録し、レコードを追加する。

curl -X POST "http://localhost:8000/users/create" -H  "accept: application/json" -H  "Content-Type: application/json" -d @create_user.json

・create_user.jsonの中身は以下


{"username": "pirorino", "email": "pirorino@gmail.com", "password": "任意のパスワード","is_active": true,"is_superuser": false}

このユーザ登録により、usersにレコードが1行追加される。
パスワードはハッシュがかけられ登録されるので、パスワードは記憶しておくこと

